{"version":3,"sources":["toast/toasts.tsx","common/constants.ts","weather/weatherApi.ts","progress/components/Progress.tsx","fabButton/components/FabClose.tsx","weather/components/Weather.tsx","weather/components/WeatherTable.tsx","weather/components/WeatherInfo.tsx","weather/components/WeatherContainer.tsx","weather/components/WeatherOverview.tsx","weather/components/WeatherLocationsList.tsx","weather/components/WeatherLocations.tsx","weather/components/WeatherIllistration.tsx","App.tsx","serviceWorker.ts","aws-exports.js","index.tsx"],"names":["error","message","toast","days","weatherApi","apiName","weatherApiPath","weatherLocationApiPath","woeid","API","get","this","queryStringParameters","response","title","temperature","consolidated_weather","the_temp","weatherRows","parseWeatherData","location","map","c","day","Date","applicable_date","getDay","max_temperature","max_temp","min_temperature","min_temp","stateAbbreviation","weather_state_abbr","state","weather_state_name","Progress","className","CircularProgress","color","FabClose","currentWoeid","onChangeLocation","Fab","aria-label","onClick","htmlColor","Weather","React","useState","setCurrentWoeid","setWeatherRows","setTemperature","setTitle","useEffect","saveWoeid","localStorage","getItem","parseInt","a","getWeatherData","weatherData","onChooseLocation","setItem","toString","resetSelectedCity","removeItem","length","WeatherTable","TableContainer","component","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","row","key","scope","Math","round","alt","width","src","WeatherInfo","WeatherContainer","children","viewBox","fill","fillOpacity","opacity","transform-origin","d","transform","WeatherOverview","weatherStateName","Fragment","WeatherLocationsList","weatherLocations","List","ListItem","button","latt_long","WeatherLocations","weatherLocationRows","setWeatherLocationRows","loading","setLoading","locationName","setLocationName","debounceLocationData","debounce","input","getLocationData","locationData","onChangeLocationName","e","inputValue","target","value","type","placeholder","onChange","WeatherIllistration","theme","createMuiTheme","palette","primary","green","secondary","lightGreen","App","ThemeProvider","autoClose","Boolean","window","hostname","match","awsmobile","Amplify","configure","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7c477e3c.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const error = (message: string) =>\r\n    toast.error(<span>{message}</span>);\r\n\r\nexport const info = (message: string) =>\r\n    toast.info(<span>{message}</span>);\r\n\r\nexport const warning = (message: string) =>\r\n    toast.warn(<span>{message}</span>);\r\n\r\nexport const success = (message: string) =>\r\n    toast.success(<span>{message}</span>);\r\n","export const debounceDelay: number = 200;\n\nexport const days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];","import { API } from \"aws-amplify\";\r\nimport { WeatherLocation, WeatherModel, ConsolidatedWeather, WeatherRow, WeatherData } from \"./models/weather\";\r\nimport { error } from \"../toast\";\r\nimport { days } from \"../common/constants\";\r\n\r\nclass WeatherApi {\r\n    private readonly apiName = \"weatherapi\";\r\n    private readonly weatherApiPath = \"/weather\";\r\n    private readonly weatherLocationApiPath = \"/location\";\r\n\r\n    public async getWeatherData(woeid: number): Promise<WeatherData | null> {\r\n        try {\r\n            const response: WeatherModel = await API.get(this.apiName, this.weatherApiPath, {\r\n                queryStringParameters: {\r\n                    woeid\r\n                }\r\n            });\r\n\r\n            return {\r\n                title: response.title,\r\n                temperature: response.consolidated_weather[0].the_temp,\r\n                weatherRows: this.parseWeatherData(response.consolidated_weather)\r\n            };\r\n        } catch (exception) {\r\n            error(\"Error fetching Weather Data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async getLocationData(location: string): Promise<WeatherLocation[] | null> {\r\n        try {\r\n            const response = await API.get(this.apiName, this.weatherLocationApiPath, {\r\n                queryStringParameters: {\r\n                    location\r\n                }\r\n            });\r\n            return response;\r\n        } catch (exception) {\r\n            error(\"Error fetching Weather Data\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public parseWeatherData(consolidated_weather: ConsolidatedWeather[]): WeatherRow[] {\r\n        return consolidated_weather.map<WeatherRow>(c => ({\r\n            day: days[(new Date(c.applicable_date)).getDay()],\r\n            max_temperature: c.max_temp,\r\n            min_temperature: c.min_temp,\r\n            stateAbbreviation: c.weather_state_abbr,\r\n            state: c.weather_state_name\r\n        }));\r\n    };\r\n}\r\n\r\nexport const weatherApi = new WeatherApi();\r\n","import React from \"react\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport \"../styles/progress.scss\";\r\n\r\nconst Progress = () => {\r\n    return (\r\n        <div className=\"progress-container\">\r\n            <CircularProgress className=\"progress-indicator\" color=\"primary\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Progress };\r\n","import React from \"react\";\r\nimport { Fab } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport \"../styles/fab-close.scss\";\r\n\r\ninterface FabCloseProps {\r\n    currentWoeid: number;\r\n    onChangeLocation: () => void;\r\n}\r\n\r\nconst FabClose: React.FunctionComponent<FabCloseProps> = ({ currentWoeid, onChangeLocation }) => {\r\n    return (\r\n        <div className=\"float-close\">\r\n            {currentWoeid !== -1 &&\r\n                <Fab color=\"default\" aria-label=\"close\" onClick={onChangeLocation}>\r\n                    <CloseIcon htmlColor=\"rgb(101, 123, 61)\" />\r\n                </Fab>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport { FabClose };","import React from \"react\";\r\nimport { weatherApi } from \"../weatherApi\";\r\nimport { WeatherRow } from \"../models/weather\";\r\nimport { WeatherContainer, WeatherInfo, WeatherLocations, WeatherIllistration } from \".\";\r\nimport { Progress } from \"../../progress\";\r\nimport \"../styles/weather.scss\";\r\nimport { FabClose } from \"../../fabButton/components/FabClose\";\r\n\r\nconst Weather = () => {\r\n\r\n    const [currentWoeid, setCurrentWoeid] = React.useState<number>(-1);\r\n    const [weatherRows, setWeatherRows] = React.useState<WeatherRow[]>([]);\r\n    const [temperature, setTemperature] = React.useState<number>(-1);\r\n    const [title, setTitle] = React.useState<string>('');\r\n\r\n    React.useEffect(() => {\r\n        const saveWoeid = localStorage.getItem('woeid');\r\n        if(saveWoeid) {\r\n            setCurrentWoeid(parseInt(saveWoeid));\r\n        }\r\n\r\n        (async () => {\r\n            if(currentWoeid !== -1) {\r\n                const weatherData = await weatherApi.getWeatherData(currentWoeid);\r\n\r\n                if(weatherData !== null ) {\r\n                    setTemperature(weatherData.temperature);\r\n                    setTitle(weatherData.title);\r\n\r\n                    if (weatherData.weatherRows !== null) {\r\n                        setWeatherRows(weatherData.weatherRows);\r\n                    }\r\n                }\r\n            }\r\n        })();\r\n    }, [currentWoeid]);\r\n\r\n    const onChangeLocation = () => {\r\n        resetSelectedCity();\r\n    };\r\n\r\n    const onChooseLocation = (woeid: number) => {\r\n        localStorage.setItem('woeid', woeid.toString());\r\n        setCurrentWoeid(woeid);\r\n    };\r\n\r\n    const resetSelectedCity = () => {\r\n        localStorage.removeItem('woeid');\r\n        setCurrentWoeid(-1);\r\n        setWeatherRows([]);\r\n    };\r\n\r\n    const renderWeatherContent = (): JSX.Element => {\r\n        if (currentWoeid === -1) {\r\n            return ( <WeatherLocations onChooseLocation={onChooseLocation} />);\r\n        } else if (weatherRows && weatherRows.length > 0) {\r\n            return (<WeatherInfo title={title} weatherRows={weatherRows} />);\r\n        } else {\r\n            return (<Progress />);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <FabClose currentWoeid={currentWoeid} onChangeLocation={onChangeLocation} />\r\n            <WeatherIllistration weatherRows={weatherRows} temperature={temperature}/>\r\n            <WeatherContainer>\r\n                {renderWeatherContent()}\r\n            </WeatherContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Weather };\r\n","import React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { WeatherRow } from \"../models/weather\";\r\nimport \"../styles/weather-table.scss\";\r\n\r\ninterface WeatherTableProps {\r\n    weatherRows: WeatherRow[];\r\n}\r\n\r\nconst WeatherTable: React.FunctionComponent<WeatherTableProps> = ({ weatherRows }) => {\r\n    return (\r\n        <TableContainer className=\"table-container\" component={Paper}>\r\n            <Table size=\"small\" aria-label=\"a dense table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Day</TableCell>\r\n                        <TableCell align=\"right\">Max Temp</TableCell>\r\n                        <TableCell align=\"right\">Min Temp</TableCell>\r\n                        <TableCell align=\"right\">State</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {weatherRows.map((row: WeatherRow) => (\r\n                        <TableRow key={row.day}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.day}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{Math.round(row.max_temperature)}</TableCell>\r\n                            <TableCell align=\"right\">{Math.round(row.min_temperature)}</TableCell>\r\n                            <TableCell align=\"right\">\r\n                                <img alt={row.state} width=\"20em\" src={`https://www.metaweather.com/static/img/weather/${row.stateAbbreviation}.svg`} />\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport { WeatherTable };\r\n","import React from \"react\";\r\nimport { WeatherTable } from \".\";\r\nimport { WeatherRow } from \"../models/weather\";\r\nimport \"../styles/weather-info.scss\";\r\n\r\ninterface WeatherInfoProps {\r\n    title: string;\r\n    weatherRows: WeatherRow[];\r\n}\r\n\r\nconst WeatherInfo: React.FunctionComponent<WeatherInfoProps> = ({title, weatherRows}) => {\r\n    return (\r\n        <>\r\n            <div className=\"weather-info-container--title\">{title}</div>\r\n            <WeatherTable weatherRows={weatherRows} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport { WeatherInfo };\r\n","import React from \"react\";\r\nimport \"../styles/weather-container.scss\";\r\n\r\ninterface WeatherContainerProps {\r\n    children: React.ReactChild;\r\n}\r\n\r\nconst WeatherContainer: React.FunctionComponent<WeatherContainerProps> = ({ children }) => {\r\n    return (\r\n        <div className=\"weather-info-wrapper\">\r\n            <div className=\"weather-svg-container\">\r\n            <svg className=\"weather-info-svg-curves\" viewBox=\"0 0 1440 300\">\r\n                <path\r\n                    className=\"weather-info-svg-curves--transparent\"\r\n                    fill=\"#fff\"\r\n                    fillOpacity=\"1\"\r\n                    opacity=\"0.2\"\r\n                    transform-origin=\"center\"\r\n                    // eslint-disable-next-line max-len\r\n                    d=\"M0,32L48,80C96,128,192,224,288,224C384,224,480,128,576,90.7C672,53,768,75,864,96C960,117,1056,139,1152,149.3C1248,160,1344,160,1392,160L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n                    />\r\n                <path\r\n                    fill=\"#fff\"\r\n                    fillOpacity=\"1\"\r\n                    transform=\"scale (-1, 1) translate(0, 65)\"\r\n                    transform-origin=\"center\"\r\n                    // eslint-disable-next-line max-len\r\n                    d=\"M0,32L48,80C96,128,192,224,288,224C384,224,480,128,576,90.7C672,53,768,75,864,96C960,117,1056,139,1152,149.3C1248,160,1344,160,1392,160L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n                />\r\n            </svg>\r\n            </div>\r\n            <div className=\"weather-info-container\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { WeatherContainer };\r\n","import React from \"react\";\r\n\r\ninterface WeatherOverviewProps {\r\n    weatherStateName: string;\r\n    temperature: number;\r\n}\r\n\r\nconst WeatherOverview: React.FunctionComponent<WeatherOverviewProps> = ({weatherStateName, temperature }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"weather-illistration--state-name\">{weatherStateName}</div>\r\n            <div className=\"weather-illistration--temperature\">{temperature}&#176;</div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport { WeatherOverview };\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { WeatherLocation } from \"../models/weather\";\r\nimport \"../styles/weather-locations-list.scss\";\r\n\r\ninterface WeatherTableProps {\r\n    weatherLocations: WeatherLocation[];\r\n    onChooseLocation: (woeid: number) => void;\r\n}\r\n\r\nconst WeatherLocationsList: React.FunctionComponent<WeatherTableProps> = ({ weatherLocations, onChooseLocation }) => {\r\n    return (\r\n        <List className=\"locations-list\">\r\n            {weatherLocations.map((row: WeatherLocation) => (\r\n                // eslint-disable-next-line react/jsx-no-bind\r\n                <ListItem component=\"a\" button key={row.latt_long} onClick={() => onChooseLocation(row.woeid)}>\r\n                    {row.title}\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport { WeatherLocationsList };\r\n","import React from \"react\";\r\nimport { WeatherLocationsList } from \".\";\r\nimport { WeatherLocation } from \"../models/weather\";\r\nimport { debounceDelay } from \"../../common/constants\";\r\nimport { weatherApi } from \"../weatherApi\";\r\nimport { Progress } from \"../../progress\";\r\nimport debounce from \"lodash.debounce\";\r\nimport \"../styles/weather-locations.scss\";\r\n\r\ninterface WeatherLocationsProps {\r\n    onChooseLocation: (woeid: number) => void;\r\n}\r\n\r\nconst WeatherLocations: React.FunctionComponent<WeatherLocationsProps> = ({ onChooseLocation }) => {\r\n\r\n    const [weatherLocationRows, setWeatherLocationRows] = React.useState<WeatherLocation[]>([]);\r\n    const [loading, setLoading] = React.useState<boolean>(false);\r\n    const [locationName, setLocationName] = React.useState<string>(\"\");\r\n\r\n    const debounceLocationData = debounce(async (input: string) => {\r\n        const locationData = await weatherApi.getLocationData(input);\r\n        if (locationData !== null) {\r\n            setWeatherLocationRows(locationData);\r\n        }\r\n        setLoading(false);\r\n    }, debounceDelay);\r\n\r\n    const onChangeLocationName = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setLoading(true);\r\n        const inputValue = e.target.value;\r\n        setLocationName(inputValue);\r\n        if (inputValue.length === 0) {\r\n            setWeatherLocationRows([]);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        await debounceLocationData(inputValue);\r\n    };\r\n\r\n    const resetLocationSearch = () => {\r\n        setWeatherLocationRows([]);\r\n    };\r\n\r\n    const onChooseLocationChild = (woeid: number) => {\r\n        onChooseLocation(woeid);\r\n        resetLocationSearch();\r\n    };\r\n\r\n    return (\r\n        <div className=\"locations-container\">\r\n            <input\r\n                className=\"locations-input\"\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n                onChange={onChangeLocationName}\r\n            />\r\n\r\n            { !!weatherLocationRows &&\r\n                <div className=\"locations-instructions-text\">Enter a City to display weather data.</div>}\r\n\r\n            {loading &&\r\n                <Progress />}\r\n\r\n            {weatherLocationRows && weatherLocationRows.length > 0 &&\r\n                <WeatherLocationsList weatherLocations={weatherLocationRows} onChooseLocation={onChooseLocationChild} />}\r\n\r\n            {locationName.length > 0 && weatherLocationRows && weatherLocationRows.length === 0 && !loading &&\r\n                <div>No results found.</div>\r\n            }\r\n\r\n        </div>);\r\n};\r\n\r\nexport { WeatherLocations };\r\n","import React from \"react\";\r\nimport { WeatherRow } from \"../models/weather\";\r\nimport { WeatherOverview } from \".\";\r\nimport \"../styles/weather-illistration.scss\";\r\n\r\ninterface WeatherIllistrationProps {\r\n    weatherRows: WeatherRow[];\r\n    temperature: number;\r\n}\r\n\r\nconst WeatherIllistration: React.FunctionComponent<WeatherIllistrationProps> = ({ weatherRows, temperature }) => {\r\n    if (weatherRows && weatherRows.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather-illistration\">\r\n            {weatherRows && weatherRows.length > 0 &&\r\n                <WeatherOverview\r\n                    weatherStateName={weatherRows[0].state}\r\n                    temperature={Math.round(temperature)}\r\n                />}\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport { WeatherIllistration };","import React from \"react\";\nimport { Weather } from \"./weather/components\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ToastContainer } from \"react-toastify\";\nimport lightGreen from \"@material-ui/core/colors/lightGreen\";\nimport green from \"@material-ui/core/colors/green\";\nimport \"./App.css\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: green,\n        secondary: lightGreen,\n    },\n});\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ThemeProvider theme={theme}>\n                <ToastContainer\n                    autoClose={5000}\n                />\n                <Weather />\n            </ThemeProvider>\n        </div>\n    );\n}\n\nexport { App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void,\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    // eslint-disable-next-line no-console\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            // eslint-disable-next-line no-console\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            // eslint-disable-next-line no-console\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            // eslint-disable-next-line no-console\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            // eslint-disable-next-line no-console\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                // eslint-disable-next-line no-console\n                console.error(error.message);\n            });\n    }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"eu-west-2\",\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"weatherapi\",\n            \"endpoint\": \"https://o2pd91igpf.execute-api.eu-west-2.amazonaws.com/dev\",\n            \"region\": \"eu-west-2\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Amplify from \"aws-amplify\";\nimport config from \"./aws-exports\";\nimport \"./index.scss\";\n\nAmplify.configure(config);\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}